import { kv } from "@vercel/kv";

export default async function handler(req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }

  try {
    // GET: Read events
    if (req.method === "GET") {
      const events = (await kv.get("cve-events")) || [];
      const { since } = req.query;

      let filtered = events;
      if (since) {
        const sinceTime = new Date(since).getTime();
        filtered = events.filter((e) => {
          const ts = new Date(e.timestamp || e.createdAt).getTime();
          return ts >= sinceTime;
        });
      }

      return res.json({ total: filtered.length, events: filtered });
    }

    // POST: Add events
    if (req.method === "POST") {
      const { events: newEvents } = req.body;

      if (!newEvents || !Array.isArray(newEvents)) {
        return res.status(400).json({ error: "Missing events array" });
      }

      const existing = (await kv.get("cve-events")) || [];
      const updated = [...existing, ...newEvents];

      // Clean events > 30 days
      const thirtyDaysAgo = new Date().getTime() - 30 * 24 * 60 * 60 * 1000;
      const cleaned = updated.filter((e) => {
        const ts = new Date(e.timestamp || e.createdAt).getTime();
        return ts >= thirtyDaysAgo;
      });

      await kv.set("cve-events", cleaned);

      return res.json({
        success: true,
        added: newEvents.length,
        total: cleaned.length,
      });
    }

    return res.status(405).json({ error: "Method not allowed" });
  } catch (error) {
    console.error("‚ùå Error:", error);
    return res.status(500).json({ error: error.message });
  }
}
