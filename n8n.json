{
  "nodes": [
    {
      "parameters": {},
      "name": "Cron 15min",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [-13760, -432],
      "id": "993419d2-b8ef-4d50-9c90-e6d10ee792b8"
    },
    {
      "parameters": {
        "jsCode": "/**\n * CHANGE DETECTION SYSTEM\n * Purpose: Avoid sending duplicate alerts by checking for changes between runs.\n * \n * Input: Normalized alerts array\n * Output: Original items if alerts have changed, or an empty object if no change.\n */\n\n// Concatenate all alert content into a single string for fingerprinting\nlet concat = items.map(i => `${i.json.title} ${i.json.link} ${i.json.text}`).join(\"\\n\");\n\nfunction simpleHash(str) {\n  // Lightweight 32-bit hash function (FNV-inspired)\n  let hash = 0, i, chr;\n  if (str.length === 0) return \"0\";\n  for (i = 0; i < str.length; i++) {\n    chr = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + chr;\n    hash |= 0; // Force to 32-bit integer\n  }\n  return hash.toString();\n}\n\nconst newHash = simpleHash(concat);\n\n// Retrieve the previously stored hash\nconst previousHash = $workflow?.getStaticData?.(\"global\")?.previousHash || \"\";\n\n// Detect changes by comparing new and previous hashes\nconst changed = newHash !== previousHash;\n\n// Store the new hash for the next run\nif ($workflow?.getStaticData?.(\"global\")) {\n  $workflow.getStaticData(\"global\").previousHash = newHash;\n}\n\n// Return items only if changes are detected\nif (changed) {\n  return items;\n} else {\n  return [{ json: {} }];\n}\n"
      },
      "name": "Diff / Hash Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [-8800, -464],
      "id": "03114878-3fca-40fa-b72d-14a8d7bcb5ec",
      "notes": "## üîÑ CHANGE DETECTION ENGINE\n\n**Purpose**: \n- Prevents duplicate alerts by detecting content changes\n- Uses hash comparison to determine new/updated alerts\n\n**Mechanism**:\n1. Generates 32-bit hash of all alert content\n2. Compares with previous run's hash (stored in workflow staticData)\n3. Continues only if hash differs (new content detected)\n\n**Behavior**:\n‚úÖ Same hash ‚Üí Returns empty array (stops execution)  \nüîÑ New hash ‚Üí Returns alerts + updates stored hash\n\n**Technical Notes**:\n- Uses simple FNV-1a inspired hash (JS implementation)\n- Persists hash between runs via $workflow.getStaticData()"
    },
    {
      "parameters": {
        "channel": "=n8n-alerts",
        "text": "=‚ö†Ô∏è Nouvelle alerte cybers√©curit√© :\n{{$json[\"slack_text\"]}}",
        "jsonParameters": true,
        "otherOptions": {},
        "attachments": [],
        "blocksJson": "={{$json[\"slack_blocks\"]}}"
      },
      "name": "Slack Notify",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 1,
      "position": [-5856, -320],
      "id": "3e261117-b475-46fa-a8df-0149300d5e8d",
      "credentials": {
        "slackApi": {
          "id": "yGWVQaghRG0skUkx",
          "name": "Slack account"
        }
      },
      "disabled": true,
      "notes": "üìå **Destination**: #n8n-alerts  \nüìù **Format**: \n- Severity emojis (üî¥/üü†/üü¢)  \n"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL INSTRUCTION - READ CAREFULLY ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è \nYOU ARE FORBIDDEN TO GENERATE ANY DATA. YOU MUST USE ONLY THE EXACT VALUES PROVIDED IN THE INPUT. \n\nINPUT DATA: \n{{ $json.batchText }}\n\nMANDATORY RULES: \n1. EXTRACT **ALL** CVEs from the input text above\n2. EACH CVE section starts with \"üîê CVE ALERT:\"\n3. PROCESS **EVERY CVE** you find in the input\n4. USE EXACT VALUES found after each label for EACH CVE\n5. DO NOT CHANGE any values (Score: 100 MUST remain 100)\n6. DO NOT FILTER by severity - OUTPUT ALL CVEs\n7. DO NOT ADD any analysis, recommendations, or generated content\n8. IF DATA IS MISSING for a CVE, use \"Unknown\" or \"N/A\"\n\nEXACT OUTPUT FORMAT FOR EACH CVE:\n\n[CVE_ID]: [CVE_ID] ‚Ä¢ Title: [Title] ‚Ä¢ Description: [Description] ‚Ä¢ Severity: [Severity] (Score: [Score]) ‚Ä¢ Source: [Source] ‚Ä¢ CISA KEV: [CISA_KEV] ‚Ä¢ OTX Pulses: [OTX_Pulses] ‚Ä¢ Exposure: [Exposure] hosts ‚Ä¢ Link: [Link]\n\nSEPARATE EACH CVE WITH TWO NEWLINES\n\nEXAMPLE:\n[CVE-2023-51767]: CVE-2023-51767 ‚Ä¢ Description: Security alert for CVE-2023-51767 - OTX pulses: 2 ‚Ä¢ Severity: Critical (Score: 100) ‚Ä¢ Source: CVE Program ‚Ä¢ CISA KEV: FALSE ‚Ä¢ OTX Pulses: 2 ‚Ä¢ Exposure: 0 hosts ‚Ä¢ Link: https://nvd.nist.gov/vuln/detail/CVE-2023-51767\n\n[Continue for ALL CVEs found...]",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [-8112, -464],
      "id": "1d628d9a-717d-4c2a-805b-6265ab20ccd8",
      "name": "AI Agent",
      "notes": "## ü§ñ [Cohere AI Analyzer]\nüß† **Model**: command-r  \nüìù **Prompt**: \"Summarize cybersecurity alerts...\"  \nüóÉÔ∏è **Memory**: Session-based context  \n\nüìä **Outputs**:\n- Concise bullet points ‚úîÔ∏è  \n- Severity assessment ‚ö†Ô∏è  \n- Linked references üîó  \n\n‚ö†Ô∏è **Cost Control**: 500 token limit"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatCohere",
      "typeVersion": 1,
      "position": [-8176, -240],
      "id": "15fa58b6-8e4e-43c5-ac9c-007b91774224",
      "name": "Cohere Chat Model",
      "credentials": {
        "cohereApi": {
          "id": "TbfUwJj1zPsSjtax",
          "name": "CohereApi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "=F5gqqZS9GrsUprYOgY34zZ2OVAZ7UG9touwYvpso"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [-8016, -240],
      "id": "cadfba3f-a446-43fc-8f5b-f1861f44091c",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "/**\n * UNIVERSAL ALERT PROCESSOR\n * Handles BOTH structured JSON AND raw text input\n */\n\nlet processedAlerts = [];\n\n// Helper functions\nfunction extractLink(line) {\n  const match = line.match(/https?:\\/\\/[^\\s]+/);\n  return match ? match[0] : \"No link available\";\n}\n\nfunction determineSeverity(line) {\n  const lower = line.toLowerCase();\n  if (lower.includes(\"critical\") || lower.includes(\"max severity\") || lower.includes(\"urgent\")) return \"Critical\";\n  if (lower.includes(\"important\") || lower.includes(\"high\")) return \"Important\";\n  return \"Medium\";\n}\n\nfunction severityScore(severity) {\n  switch(severity.toLowerCase()) {\n    case \"critical\": return 100;\n    case \"important\": return 70;\n    case \"high\": return 70;\n    case \"medium\": return 30;\n    default: return 30;\n  }\n}\n\n// ‚úÖ Regex pour extraire un CVE d'une ligne texte\nfunction extractCveId(line) {\n  const match = line.match(/CVE-\\d{4}-\\d+/i);\n  return match ? match[0].toUpperCase() : null;\n}\n\n// Check if we have structured JSON from AI (new format)\nif (items.length > 0 && items[0].json && items[0].json.cve_id !== undefined) {\n  // PROCESS STRUCTURED JSON FROM AI\n  processedAlerts = items.map(item => ({\n    json: {\n      timestamp: new Date().toISOString(),\n      title: item.json.title || \"No title\",\n      link: item.json.link || \"No link available\",\n      severity: item.json.severity || \"Medium\",\n      score: severityScore(item.json.severity || \"Medium\"),\n      text: item.json.text || item.json.description || item.json.title,\n      status: item.json.status || \"New\",\n      source: item.json.source || \"Unknown\",\n      cve_id: item.json.cve_id || item.json.cve || null\n    }\n  }));\n} else {\n  // PROCESS RAW TEXT\n  const rawText = items.map(i => i.json.text || i.json.output || \"\").join(\"\\n\");\n  const lines = rawText.split(/\\n+/).filter(line => line.trim() !== \"\");\n\n  const alertLines = lines.filter(line => \n    line.trim().startsWith(\"-\") &&\n    !line.toLowerCase().includes(\"sure, i have summarized\") &&\n    !line.toLowerCase().includes(\"stay up to date\") &&\n    !line.toLowerCase().includes(\"here's a concise summary\") &&\n    !line.toLowerCase().includes(\"the following is a concise summary\")\n  );\n\n  processedAlerts = alertLines.map(line => {\n    const cve_id = extractCveId(line);\n    const link = extractLink(line);\n    const severity = determineSeverity(line);\n    const score = severityScore(severity);\n    \n    let title = line.replace(link, \"\").replace(/^-/, \"\").trim();\n    title = title.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\").trim();\n    \n    let text = line.replace(/^-/, \"\").trim();         \n    text = text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\").trim();\n\n    return {\n      json: {\n        title,\n        cve_id,\n        link,\n        severity,\n        score,\n        text,\n        status: \"New\",\n        source: \"Unknown\"\n      }\n    };\n  });\n}\n\n// Source detection based on link\nprocessedAlerts.forEach(alert => {\n  const link = (alert.json.link || '').toLowerCase();\n\n  if (link.includes('cert.ssi.gouv.fr')) {\n    alert.json.source = 'CERT-FR';\n  } else if (link.includes('bleepingcomputer.com')) {\n    alert.json.source = 'BleepingComputer';\n  } else if (link.includes('nist.gov')) {\n    alert.json.source = 'NIST';\n  } else if (link.includes('cisa.gov') || link.includes('us-cert.cisa.gov')) {\n    alert.json.source = 'CISA';\n  } else if (!alert.json.source || alert.json.source === \"Unknown\") {\n    alert.json.source = 'Unknown';\n  }\n});\n\nreturn processedAlerts;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-7408, -464],
      "id": "fd9a09fa-8b13-4c97-9650-d3505397c43a",
      "name": "Structure Alerts",
      "notes": "üõ† [Alert Parser / Structurer]\n\nüìå Purpose: Convert raw AI Agent text into structured alerts\nüìù Process:\n\nJoin all text content\nSplit into lines and clean empty entries\nExtract links from lines\nDetermine severity and assign numeric score\nFilter out generic/call-to-action lines\n\nOutput structured alerts {title, link, severity, score, text}\n‚ö†Ô∏è Optional: filter only critical alerts downstream"
    },
    {
      "parameters": {
        "numberInputs": 9
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-12368, -512],
      "id": "3da68dd5-4b68-4453-8058-21c99402e9e5",
      "name": "Merge",
      "notes": "## üîÄ [Alert Aggregator]\nüì• **Inputs**: \n1. CERT-FR üá´üá∑\n2. NIST üá∫üá∏  \n3. BleepingComputer üì∞  \n4. CISA üèõÔ∏è  \n\n‚öôÔ∏è **Logic**:\n- Continue on partial failures (‚â•2 sources)  \n- Preserve source metadata üè∑Ô∏è  \n- Normalize timestamps ‚è∞  \n\n‚ö†Ô∏è **Order Matters**: Maintains error tracking"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ NORMALIZE ALERTS - NE RIEN CHANGER\n * Passe-through pur sans aucune modification\n */\n\nconsole.log(\"=== üéØ NORMALIZE ALERTS (PASS-THROUGH) ===\");\n\nif (items.length === 0) return [];\n\n// üéØ NE RIEN FAIRE, juste logger et passer\nconsole.log(`üì§ Passing through ${items.length} alerts unchanged`);\n\n// Logger les scores pour v√©rification\nitems.slice(0, 5).forEach((item, index) => {\n  const data = item.json;\n  console.log(`üìä ${data.cve_id} - Severity: ${data.severity}, Score: ${data.score}`);\n});\n\n// üéØ RETOURNER LES ITEMS TELS QUELS\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-9040, -464],
      "id": "67b98638-4d18-4a37-99a8-e8de72ff2e0c",
      "name": "Normalize Alerts",
      "alwaysOutputData": true,
      "notes": "üö® ALERT NORMALIZER\n\nüì• Input: Raw data from multiple sources\n‚öôÔ∏è Process:\n1Ô∏è‚É£ Standardize title and link fields\n2Ô∏è‚É£ Preserve full raw payload for debugging\nüì§ Output: {title, link, text, raw}"
    },
    {
      "parameters": {
        "jsCode": "let allAlerts = [];\n\n// Normalisation\nitems.forEach(item => {\n  if (Array.isArray(item)) {\n    allAlerts.push(...item);\n  } else if (Array.isArray(item.json)) {\n    allAlerts.push(...item.json.map(alert => (\n      alert.json ? alert : { json: alert }\n    )));\n  } else if (item.json) {\n    allAlerts.push(item);\n  } else {\n    allAlerts.push({ json: item });\n  }\n});\n\n// Comptages\nconst totalAlerts = allAlerts.length;\nconst criticalAlerts = allAlerts.filter(a => a.json && a.json.severity === 'Critical').length;\nconst errorCount = items.reduce((sum, item) => sum + (item.json.errorCount || 0), 0);\n\nconst bySource = {};\nconst bySeverity = {};\nlet maxSeverity = 'None';\n\n// Analyse\nallAlerts.forEach(alert => {\n  if (alert.json) {\n    const source = alert.json.source \n                || alert.json.Source \n                || alert.json.src \n                || alert.json.origin \n                || 'Unknown';\n    const severity = alert.json.severity || 'Unknown';\n\n    bySource[source] = (bySource[source] || 0) + 1;\n    bySeverity[severity] = (bySeverity[severity] || 0) + 1;\n\n    if (severity === 'Critical') maxSeverity = 'Critical';\n    else if (severity === 'Important' && maxSeverity !== 'Critical') maxSeverity = 'Important';\n    else if (severity === 'Medium' && maxSeverity === 'None') maxSeverity = 'Medium';\n  }\n});\n\n// R√©sum√©s\nconst sourcesSummary = Object.entries(bySource)\n  .map(([source, count]) => `${source}: ${count}`)\n  .join(', ') || 'None';\n\nconst severitySummary = Object.entries(bySeverity)\n  .map(([severity, count]) => `${severity}: ${count}`)\n  .join(', ') || 'None';\n\nconst summary = `\nWorkflow Health Check:\n- Total alerts processed: ${totalAlerts}\n- Critical alerts: ${criticalAlerts}\n- Errors: ${errorCount}\n- Sources: ${sourcesSummary}\n- Severity: ${severitySummary}\n- Max severity: ${maxSeverity}\n`;\n\nreturn [{\n  json: {\n    summary,\n    totalAlerts,\n    criticalAlerts,\n    errorCount,\n    bySource,\n    bySeverity,\n    maxSeverity,\n    sourcesSummary,\n    severitySummary,\n    timestamp: new Date().toISOString()\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-6528, -608],
      "id": "650176f7-63f2-4f05-8554-c5418b140ad5",
      "name": "Heath check",
      "disabled": true,
      "notes": "## üìä [Health Check Dashboard]\nüîç **Purpose**:  \n- Monitors overall workflow health  \n- Tracks key metrics for debugging  \n\nüìà **Current Metrics** (JS code):  \n```\n\nconst totalAlerts = allAlerts.length;\nconst criticalAlerts = allAlerts.filter(...);\nconst errorCount = items.reduce(...);\nüì§ Output Format:\n\njson\n{\n  \"summary\": \"Workflow Health Check:\\n- Total alerts: 15\\n- Critical alerts: 3\\n- Errors: 1\",\n  \"totalAlerts\": 15,\n  \"criticalAlerts\": 3,\n  \"errorCount\": 1\n}\n‚ö†Ô∏è Dependencies:\n\nRequires upstream nodes to provide errorCount\nRelies on severity field for critical alerts\n\nüîß Pro Tip:\njavascript\n// Add to existing code:\nconsole.log(`HEALTHCHECK - ${totalAlerts} alerts`);\n"
    },
    {
      "parameters": {
        "jsCode": "// Filter items that contain an error\nconst errorItems = items.filter(item =>\n  item.json && (item.json.error || item.json.errorMessage || item.json.errorCount > 0)\n);\n\n// If there are no errors, don't send anything\nif (errorItems.length === 0) {\n  return [];\n}\n\n// Build the HTML body for the errors with enhanced context\nconst body = `\n<div style=\"font-family: Arial, sans-serif; max-width: 600px;\">\n  <h2 style=\"color: #d93025;\">üö® Workflow Security Alert System - Errors Detected</h2>\n  \n  ${errorItems.map(e => `\n    <div style=\"background-color: #fce8e6; padding: 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #d93025;\">\n      <h3 style=\"margin: 0 0 10px 0; color: #d93025;\">\n        ${e.json.nodeName || 'Unknown Node'}\n      </h3>\n      <p style=\"margin: 5px 0;\">\n        <strong>üîç Source:</strong> ${e.json.source || 'Unknown'}<br>\n        <strong>‚è∞ Time:</strong> ${new Date().toISOString().replace('T', ' ').substring(0, 19)}<br>\n        <strong>üìä Error Count:</strong> ${e.json.errorCount || 1}\n      </p>\n      <div style=\"background-color: #fff; padding: 10px; border-radius: 4px; margin: 10px 0;\">\n        <strong>‚ùå Error Details:</strong><br>\n        <code style=\"color: #d93025;\">\n          ${e.json.errorMessage || JSON.stringify(e.json.error) || 'Unknown error'}\n        </code>\n      </div>\n      ${e.json.link ? `<p><strong>üîó Related URL:</strong> <a href=\"${e.json.link}\">${e.json.link}</a></p>` : ''}\n    </div>\n  `).join('')}\n  \n  <hr style=\"border: none; border-top: 2px dashed #ccc; margin: 20px 0;\">\n  \n  <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 8px;\">\n    <h4 style=\"margin: 0 0 10px 0;\">üìà Summary</h4>\n    <p style=\"margin: 5px 0;\">\n      <strong>Total Errors:</strong> ${errorItems.length}<br>\n      <strong>Sources Affected:</strong> ${[...new Set(errorItems.map(e => e.json.source || 'Unknown'))].join(', ')}<br>\n      <strong>Environment:</strong> ${$env.ENVIRONMENT || 'Production'}\n    </p>\n  </div>\n  \n  <p style=\"color: #5f6368; font-size: 12px; margin-top: 20px;\">\n    ‚ö†Ô∏è This is an automated alert from the Security Monitoring Workflow. \n    Please investigate these errors to ensure continuous monitoring.\n  </p>\n</div>\n`;\n\n// Return a structured item for Gmail with priority tracking\nreturn [{\n  json: {\n    subject: `üö® SECURITY WORKFLOW FAILURE - ${errorItems.length} error(s) from ${[...new Set(errorItems.map(e => e.json.source || 'Unknown'))].join(', ')}`,\n    body,\n    priority: \"high\",\n    errorCount: errorItems.length,\n    affectedSources: [...new Set(errorItems.map(e => e.json.source || 'Unknown'))]\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-11984, -736],
      "id": "2c5b97b5-5385-4094-b993-bbc98177b433",
      "name": "handler errors",
      "notes": "## üöë [Error Tracker]\nüõ†Ô∏è **Catches**:\n- HTTP 403/429/500  \n- Parser failures  \n- Empty responses  \n\nüì® **Actions**:\n1. Formats error context  \n2. Alerts admins via email ‚úâÔ∏è  \n3. Logs to workflow staticData üìù  \n\nüí° **Debug Tip**: \n`console.log(fullError)` in code"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üìß HTML CONCAT ALERTS - Avec donn√©es CVE\n */\n\nconsole.log(\"=== üìß FORMATTING ALERTS ===\");\n\nif (items.length === 0) return [];\n\nlet alerts = items.map(i => i.json);\n\n// üéØ Trier par score d√©croissant\nalerts.sort((a, b) => (b.score || 0) - (a.score || 0));\n\n// üéØ Construire le HTML avec enrichissement CVE\nlet body = alerts.map(alert => {\n  const isCve = alert.cve_id && alert.cve_id.startsWith('CVE-');\n  \n  return `\n  <div style=\"border: 2px solid #ff4444; border-radius: 8px; padding: 15px; margin: 10px 0; background: #fff8f8;\">\n    <h3 style=\"color: #d93025; margin: 0 0 10px 0;\">\n      ${isCve ? 'üîê CVE: ' : '‚ö†Ô∏è '}${alert.title || 'No title'}\n    </h3>\n    \n    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin: 10px 0;\">\n      <div>\n        <strong>Severity:</strong> <span style=\"color: #d93025; font-weight: bold;\">${getSeverityEmoji(alert.severity)} ${alert.severity || 'Unknown'}</span><br>\n        <strong>Score:</strong> <span style=\"color: #d93025; font-weight: bold;\">${alert.score || 'N/A'}</span><br>\n        <strong>Source:</strong> ${alert.source || 'Unknown'}\n      </div>\n      <div>\n        <strong>Assigned Team:</strong> <span style=\"color: #1e88e5;\">${alert.assigned_team || 'SOC'}</span><br>\n        <strong>SLA:</strong> <span style=\"color: #43a047;\">${alert.sla || '4h'}</span><br>\n        <strong>Escalation:</strong> ${alert.escalation_path || 'L2'}\n      </div>\n    </div>\n    \n    ${isCve ? `\n    <div style=\"background: #e8f5e8; padding: 10px; border-radius: 5px; margin: 10px 0;\">\n      <strong>üìä CVE Enrichment:</strong><br>\n      ‚Ä¢ CVE ID: <code>${alert.cve_id}</code><br>\n      ${alert.enriched_data ? `\n      ‚Ä¢ CISA KEV: ${alert.enriched_data.cisa_kev ? '‚úÖ Exploited' : '‚ùå Not exploited'}<br>\n      ‚Ä¢ OTX Pulses: ${alert.enriched_data.otx_pulses || 0}<br>\n      ‚Ä¢ VT Detections: ${alert.enriched_data.virus_total_detections || 0}<br>\n      ‚Ä¢ Exposure: ${alert.enriched_data.exposure || 0} hosts\n      ` : ''}\n    </div>\n    ` : ''}\n    \n    <p><strong>Description:</strong> ${alert.text || alert.description || 'No description available'}</p>\n    \n    <p><strong>Link:</strong> <a href=\"${alert.link}\" target=\"_blank\" style=\"color: #1a73e8;\">${alert.link || 'No link available'}</a></p>\n    \n    ${alert.published ? `<p><small>Published: ${new Date(alert.published).toLocaleString()}</small></p>` : ''}\n  </div>\n  `;\n}).join('');\n\n// üéØ Ajouter l'en-t√™te\nconst header = `\n  <div style=\"background: #d93025; color: white; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n    <h2 style=\"margin: 0;\">üîê CRITICAL SECURITY ALERTS</h2>\n    <p style=\"margin: 5px 0 0 0;\">${alerts.length} alert(s) requiring immediate attention</p>\n  </div>\n`;\n\nreturn [{ json: { body: header + body } }];\n\n// üéØ Helper pour les emojis de s√©v√©rit√©\nfunction getSeverityEmoji(severity) {\n  switch(severity?.toLowerCase()) {\n    case 'critical': return 'üî¥';\n    case 'high': return 'üü†';\n    case 'medium': return 'üü°';\n    case 'low': return 'üü¢';\n    default: return '‚ö™';\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-6272, -544],
      "id": "e727e56e-35d2-47e4-95c7-0b788609168f",
      "name": "HTML Concat Alerts",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "/**\n * üí¨ SLACK MESSAGE FORMATTER - Avec CVE\n */\n\nconsole.log(\"=== üí¨ FORMATTING SLACK ALERTS ===\");\n\nif (items.length === 0) return [];\n\nlet alerts = items.map(i => i.json);\nalerts.sort((a, b) => (b.score || 0) - (a.score || 0));\n\nlet body = alerts.map(alert => {\n  const isCve = alert.cve_id && alert.cve_id.startsWith('CVE-');\n  \n  let message = `*${isCve ? 'üîê ' : '‚ö†Ô∏è '}${alert.title || 'New Critical Alert'}*\\n`;\n  message += `‚Ä¢ *Severity:* ${getSeverityEmoji(alert.severity)} ${alert.severity || 'Unknown'} (Score: ${alert.score || 'N/A'})\\n`;\n  message += `‚Ä¢ *Source:* ${alert.source || 'Unknown'} | *Team:* ${alert.assigned_team || 'SOC'}\\n`;\n  message += `‚Ä¢ *SLA:* ${alert.sla || '4h'} | *Escalation:* ${alert.escalation_path || 'L2'}\\n`;\n  \n  if (isCve) {\n    message += `‚Ä¢ *CVE ID:* ${alert.cve_id}\\n`;\n    if (alert.enriched_data) {\n      message += `‚Ä¢ *CISA KEV:* ${alert.enriched_data.cisa_kev ? '‚úÖ Exploited' : '‚ùå Not exploited'}\\n`;\n      message += `‚Ä¢ *OTX Pulses:* ${alert.enriched_data.otx_pulses || 0}\\n`;\n      message += `‚Ä¢ *VT Detections:* ${alert.enriched_data.virus_total_detections || 0}\\n`;\n    }\n  }\n  \n  message += `‚Ä¢ *Link:* ${alert.link || 'No link available'}\\n`;\n  message += `‚Ä¢ *Description:* ${alert.text || alert.description || 'No description'}\\n`;\n  \n  if (alert.published) {\n    message += `‚Ä¢ *Published:* ${new Date(alert.published).toLocaleString()}\\n`;\n  }\n  \n  message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;\n  \n  return message;\n}).join('\\n');\n\nconst summary = `üîê *CRITICAL SECURITY ALERTS - ${alerts.length} alert(s)*\\n`;\nreturn [{ json: { body: summary + body } }];\n\nfunction getSeverityEmoji(severity) {\n  switch(severity?.toLowerCase()) {\n    case 'critical': return 'üî¥';\n    case 'high': return 'üü†'; \n    case 'medium': return 'üü°';\n    case 'low': return 'üü¢';\n    default: return '‚ö™';\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-6272, -368],
      "id": "33dc04cf-02d8-4d43-9eff-64e53caca3f4",
      "name": "Mrkdwn Concat Alerts",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ BATCHING ITEMS - Version multi-format (alerts + CVE)\n */\n\nconsole.log(\"=== üì¶ BATCHING ITEMS ===\");\n\nif (items.length === 0) return [];\n\nlet batchText = \"\";\nlet alertCount = 0;\nlet cveCount = 0;\n\nfor (const item of items) {\n  const alert = item.json;\n  \n  if (!alert) continue;\n\n  // // üéØ Format for the AI Agent - different style depending on the type\n  if (alert.cve_id && alert.cve_id.startsWith('CVE-')) {\n    // Format CVE enrichie\n    batchText += `üîê CVE ALERT: ${alert.cve_id}\\n`;\n    batchText += `Title: ${alert.title || 'No title'}\\n`;\n    batchText += `Link: ${alert.link}\\n`;\n    batchText += `Severity: ${alert.severity} (Score: ${alert.score})\\n`;\n    batchText += `Source: ${alert.source}\\n`;\n    \n    if (alert.enriched_data) {\n      batchText += `Enrichment: \\n`;\n      batchText += `‚Ä¢ CISA KEV: ${alert.enriched_data.cisa_kev ? 'TRUE' : 'FALSE'}\\n`;\nbatchText += `‚Ä¢ OTX Pulses: ${alert.enriched_data.otx_pulses || 0}\\n`;\nbatchText += `‚Ä¢ VT Detections: ${alert.enriched_data.virus_total_detections || 0}\\n`;\nbatchText += `‚Ä¢ Exposure: ${alert.enriched_data.exposure || 0} hosts\\n`;\n\n\n    }\n    \n    batchText += `Description: ${alert.text}\\n\\n`;\n    cveCount++;\n    \n  } else {\n    // Format normal alert\n    batchText += `‚ö†Ô∏è SECURITY ALERT\\n`;\n    batchText += `Title: ${alert.title || 'No title'}\\n`;\n    batchText += `Link: ${alert.link || 'No link'}\\n`;\n    batchText += `Severity: ${alert.severity} (Score: ${alert.score})\\n`;\n    batchText += `Source: ${alert.source || 'Unknown'}\\n`;\n    batchText += `Description: ${alert.text || alert.description}\\n\\n`;\n    alertCount++;\n  }\n}\n\nconsole.log(`üìù Batch: ${alertCount} alerts + ${cveCount} CVE = ${alertCount + cveCount} total`);\nconsole.log(`üìè Batch text length: ${batchText.length} characters`);\n\nreturn [{ json: { batchText, alertCount, cveCount, totalItems: items.length } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-8560, -464],
      "id": "7ea4df93-0a58-49f5-806b-23cd21764840",
      "name": "Batching Items"
    },
    {
      "parameters": {
        "sendTo": "mikayakouta@gmail.com",
        "subject": "=Subject: Cybersecurity Alerts - Summary",
        "message": "=Body: {{ $json[\"body\"] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-5888, -544],
      "id": "b5e540fb-d71a-4c03-9ee5-8053ce514726",
      "name": "Alert message",
      "webhookId": "42013e47-0243-4f57-8469-138875a10976",
      "credentials": {
        "gmailOAuth2": {
          "id": "S0UW56t547e9XakR",
          "name": "Gmail account"
        }
      },
      "disabled": true,
      "notes": "üìß [Gmail Sender]\n\nüìå Destination: Security team mailbox\nüìù Format:\n\nSubject: [ALERT] {Severity} - {Title}\n\nBody: Title + Link + Source\n‚ö†Ô∏è Includes severity emoji in subject"
    },
    {
      "parameters": {
        "sendTo": "mikayakouta@gmail.com",
        "subject": "={{$json[\"subject\"]}}",
        "message": "={{$json[\"body\"]}}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [-11824, -736],
      "id": "41964777-57db-41d3-b39e-3a4f75430bc0",
      "name": "Errors Message",
      "webhookId": "a3508365-3d17-4070-8ad7-51ff26a20e52",
      "credentials": {
        "gmailOAuth2": {
          "id": "S0UW56t547e9XakR",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ PASS-THROUGH ALL ALERTS - No filtering for dashboard\n * This node adds business metadata but does NOT filter\n */\n\nconsole.log(\"=== üìä PASSING ALL ALERTS TO DASHBOARD ===\");\n\nif (items.length === 0) {\n  console.log(\"‚ùå No items received\");\n  return [];\n}\n\nconsole.log(`üì• Received ${items.length} alerts from previous node`);\n\nconst allAlerts = items.map((item, index) => {\n  const alert = item.json;\n  \n  if (!alert) {\n    console.log(`‚ùå Item ${index} has no JSON data`);\n    return item; // Return as-is if no JSON\n  }\n\n  console.log(`üîç Processing alert ${index}: ${alert.title || 'No title'} - Severity: ${alert.severity || 'Unknown'}`);\n\n  // Business logic for escalation paths (no filtering)\n  let escalation_path = \"L2\";\n  let sla = \"4h\";\n  let assigned_team = \"SOC\";\n\n  switch(alert.source) {\n    case 'CERT-FR':\n      escalation_path = \"L3\";\n      sla = \"1h\";\n      assigned_team = \"CERT-Interne\";\n      break;\n    case 'CISA':\n      escalation_path = \"L3\"; \n      sla = \"2h\";\n      assigned_team = \"Security-Ops\";\n      break;\n    case 'NIST':\n      escalation_path = \"L2\";\n      sla = \"4h\";\n      assigned_team = \"Vulnerability-Mgmt\";\n      break;\n    case 'BleepingComputer':\n      escalation_path = \"L2\";\n      sla = \"6h\";\n      assigned_team = \"Threat-Intel\";\n      break;\n  }\n\n  // Priority calculation (info only, no filtering)\n  let priority = \"NORMAL\";\n  if (alert.severity === 'Critical' || alert.score >= 90) {\n    priority = \"CRITICAL\";\n  } else if (alert.severity === 'High' || alert.score >= 70) {\n    priority = \"HIGH\";\n  } else if (alert.severity === 'Medium' || alert.score >= 50) {\n    priority = \"MEDIUM\";\n  } else {\n    priority = \"LOW\";\n  }\n\n  return {\n    json: {\n      ...alert,\n      escalation_path,\n      sla,\n      assigned_team,\n      priority,\n      timestamp: new Date().toISOString(),\n      workflow_id: \"hunter-ai-dashboard\",\n      // Preserve original severity for dashboard filtering\n      original_severity: alert.severity,\n      original_score: alert.score\n    }\n  };\n});\n\nconsole.log(`üì§ Passing ${allAlerts.length} alerts to dashboard (all severities)`);\nconsole.log(\"Severity distribution:\", \n  allAlerts.reduce((acc, item) => {\n    const severity = item.json.severity || 'Unknown';\n    acc[severity] = (acc[severity] || 0) + 1;\n    return acc;\n  }, {})\n);\n\nreturn allAlerts;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-6528, -448],
      "id": "442af8d4-e9bb-44ed-a38d-05af6b17d528",
      "name": "Critical Alerts",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "const sources = {\n  \"cert.ssi.gouv.fr\": \"CERT-FR\",\n  \"bleepingcomputer.com\": \"BleepingComputer\", \n  \"nist.gov\": \"NIST\",\n  \"cisa.gov\": \"CISA\",\n  \"github.com\": \"GitHub Security\",\n  \"microsoft.com\": \"Microsoft Security\",\n  \"krebsonsecurity.com\": \"KrebsOnSecurity\"\n};\n\nfunction detectSource(link) {\n  if (!link) return \"Unknown\";\n  for (const domain in sources) {\n    if (link.includes(domain)) {\n      return sources[domain];\n    }\n  }\n  return \"Unknown\";\n}\n\nitems.forEach(item => {\n  item.json.source = detectSource(item.json.link);\n});\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-7616, -464],
      "id": "c525d890-7178-4602-b155-7148210211d8",
      "name": "Source Detection"
    },
    {
      "parameters": {
        "jsCode": "// RATE LIMITER - Prevent too frequent workflow executions\nconst now = Date.now();\nconst workflowStaticData = $getWorkflowStaticData('global');\nconst lastExecution = workflowStaticData.lastExecution || 0;\n\n// Configuration - 5 minutes minimum between executions\nconst MIN_INTERVAL = 300000;\n\n// Check if execution is too soon\nif (now - lastExecution < MIN_INTERVAL) {\n  const secondsSinceLast = Math.round((now - lastExecution) / 1000);\n  \n  return [{ \n    json: { \n      error: \"Rate limited\", \n      message: `Skipping execution - Only ${secondsSinceLast}s since last run (min: ${MIN_INTERVAL/1000}s)`,\n      skip: true,\n      timestamp: new Date().toISOString()\n    } \n  }];\n}\n\n// Update last execution time and continue\nworkflowStaticData.lastExecution = now;\n\n// Pass through all items for normal processing\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-13360, -432],
      "id": "727eee77-788d-4f85-871f-a3055ac47488",
      "name": "Rate Limiter",
      "notes": "## ‚è∞ Rate Limiter\n\n**Purpose**: \n- Prevents too frequent workflow executions\n- Protects against cron configuration errors\n- Reduces API costs and prevents service abuse\n\n**Protection Mechanism**:\n- Tracks last execution timestamp in workflow staticData\n- Enforces minimum time interval between executions\n- Returns `skip: true` when rate limit exceeded\n\n**Configuration**:\n- Default: 300000ms (5 minutes minimum between runs)\n- Adjustable via `MIN_INTERVAL` variable\n- Global context persistence across executions\n\n**Error Handling**:\n- Returns clear error message with timing details\n- Non-blocking - workflow continues with skip flag\n- Logs rate limit events for monitoring\n\n**Use Cases**:\n- Prevents spam when cron is misconfigured\n- Protects during API rate limit errors\n- Avoids unnecessary resource consumption\n\n**Integration**:\n- Place immediately after trigger/cron node\n- Connects to all source nodes in parallel\n- Compatible with any workflow structure\n\n**Technical Notes**:\n- Uses $getWorkflowStaticData('global')\n- Requires \"Always Output Data\" setting\n- Timezone-independent timestamp comparison"
    },
    {
      "parameters": {
        "jsCode": "// WORKFLOW HEALTH MONITOR - Check technical performance\nconst workflowStaticData = $getWorkflowStaticData('global');\nconst executionStart = workflowStaticData.executionStart || Date.now();\nconst now = Date.now();\nconst executionTime = now - executionStart;\n\n// Get memory usage (Node.js only)\nconst memoryUsage = process.memoryUsage ? process.memoryUsage() : null;\n\n// Thresholds configuration\nconst MAX_EXECUTION_TIME = 120000; // 2 minutes\nconst HIGH_MEMORY_USAGE = 500 * 1024 * 1024; // 500MB\n\n// Check for issues\nconst issues = [];\n\nif (executionTime > MAX_EXECUTION_TIME) {\n  issues.push(`Execution too long: ${Math.round(executionTime/1000)}s (max: ${MAX_EXECUTION_TIME/1000}s)`);\n}\n\nif (memoryUsage && memoryUsage.heapUsed > HIGH_MEMORY_USAGE) {\n  issues.push(`High memory usage: ${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`);\n}\n\n// Check for workflow errors from previous nodes\nconst errorItems = items.filter(item => \n  item.json && (item.json.error || item.json.errorMessage || item.json.skip)\n);\n\nif (errorItems.length > 0) {\n  issues.push(`${errorItems.length} error(s) in workflow execution`);\n}\n\n// If no issues, don't send anything\nif (issues.length === 0) {\n  // Store execution start for next run\n  workflowStaticData.executionStart = Date.now();\n  return [];\n}\n\n// Build alert message\nconst body = `\nüö® WORKFLOW HEALTH ALERT\n\nIssues detected:\n${issues.map(issue => `‚Ä¢ ${issue}`).join('\\n')}\n\nTechnical details:\n- Execution time: ${Math.round(executionTime/1000)}s\n- Memory usage: ${memoryUsage ? Math.round(memoryUsage.heapUsed / 1024 / 1024) + 'MB' : 'N/A'}\n- Timestamp: ${new Date().toISOString()}\n- Workflow: hunter-ai-challenge\n\nPlease check the workflow execution logs.\n`;\n\n// Return alert for email notification\nreturn [{\n  json: {\n    subject: `üö® WORKFLOW HEALTH ISSUE - ${issues.length} problem(s)`,\n    body,\n    priority: \"critical\",\n    issues,\n    executionTime,\n    memoryUsage: memoryUsage ? Math.round(memoryUsage.heapUsed / 1024 / 1024) : null,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-5648, -464],
      "id": "70f23958-795d-4791-97af-88dbe9184293",
      "name": "WORKFLOW HEALTH MONITOR",
      "alwaysOutputData": true,
      "retryOnFail": false,
      "disabled": true,
      "onError": "continueRegularOutput",
      "notes": "## ü©∫ Workflow Health Monitor\n\n**Purpose**: \n- Monitors technical performance of the workflow itself\n- Detects execution issues before they impact operations\n- Provides proactive alerts for system maintenance\n\n**Metrics Tracked**:\n- ‚è±Ô∏è Execution time (threshold: 120s)\n- üíæ Memory usage (threshold: 500MB) \n- üö® Error propagation from upstream nodes\n- üìà Performance trends over time\n\n**Alert Conditions**:\n- Execution time > 2 minutes\n- Memory usage > 500MB\n- Error signals from previous nodes\n- Multiple rapid executions (rate limiting)\n\n**Output Behavior**:\n- Returns health status: `healthy` / `unhealthy`\n- Only sends email alerts when issues detected\n- Always continues workflow execution (via \"Always Output Data\" setting)\n\n**Configuration**:\n- thresholds adjustable in code\n- uses workflow staticData for execution timing\n- compatible with n8n cloud and self-hosted\n\n**Best Practices**:\n- Place at end of workflow\n- Connect to dedicated admin email channel\n- Review logs monthly for performance trends\n- Adjust thresholds based on your infrastructure\n\n**Dependencies**:\n- Requires \"Always Output Data\" setting enabled\n- Uses $getWorkflowStaticData('global')\n- Monitors process.memoryUsage (Node.js only)"
    },
    {
      "parameters": {
        "jsCode": "// Function node -> builds slack_text + slack_blocks (with buttons)\n// Copy-paste as is\n\nconst input = $json || {};\n\n// Robust title/description retrieval\nconst title = (input.title || input.alertTitle || input.slack_title || \"New Security Alert\").toString();\nconst description = (input.text || input.description || input.body || input.summary || \"\").toString();\n\n// Build a simple and secure alertId - SECURED VERSION\nconst alertId = (input.alertId || input.id || Date.now() + \"_\" + Math.random().toString(36).substr(2, 9)).toString().replace(/\\s+/g, '_').replace(/[^A-Za-z0-9_\\-\\.]/g, '').slice(0,120);\n\n// SOURCE PERSONALIZATION - SIMPLE ADDITION\nconst source = input.source || 'Unknown';\nlet sourceEmoji = 'üîç'; // Default\n\nswitch(source) {\n    case 'CERT-FR':\n        sourceEmoji = 'üá´üá∑';\n        break;\n    case 'CISA':\n        sourceEmoji = 'üá∫üá∏';\n        break;\n    case 'NIST':\n        sourceEmoji = 'üèõÔ∏è';\n        break;\n    case 'BleepingComputer':\n        sourceEmoji = 'üì∞';\n        break;\n    case 'GitHub Security':\n        sourceEmoji = 'üêô';\n        break;\n    case 'Microsoft Security':\n        sourceEmoji = 'üîµ';\n        break;\n}\n\n// Build blocks (POJO) - WITH SOURCE EMOJI\nconst blocksObj = [\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": `${sourceEmoji} *${title}*\\n${description}`\n    }\n  },\n  {\n    \"type\": \"actions\",\n    \"elements\": [\n      {\n        \"type\": \"button\",\n        \"text\": { \"type\": \"plain_text\", \"text\": \"‚úÖ Ack\" },\n        \"action_id\": `ack_${alertId}`,\n        \"value\": `ack_${alertId}`\n      },\n      {\n        \"type\": \"button\",\n        \"text\": { \"type\": \"plain_text\", \"text\": \"üîç Investigate\" },\n        \"action_id\": `investigate_${alertId}`,\n        \"value\": `investigate_${alertId}`\n      },\n      {\n        \"type\": \"button\",\n        \"text\": { \"type\": \"plain_text\", \"text\": \"üö® Dismiss\" },\n        \"action_id\": `dismiss_${alertId}`,\n        \"value\": `dismiss_${alertId}`\n      }\n    ]\n  }\n];\n\n// For safety, stringify (works on majority of n8n Slack nodes)\nreturn [{\n  json: {\n    ...input,\n    alertId,\n    slack_channel: \"#n8n-alerts\",\n    slack_text: `${sourceEmoji} ‚ö†Ô∏è ${title}`, // EMOJI ADDED HERE TOO\n    slack_blocks: JSON.stringify(blocksObj) // stringified JSON for Slack node\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-6080, -368],
      "id": "5987322f-0c1c-4470-89b1-e083d0c5fe83",
      "name": "Slack Message Formatter",
      "disabled": true,
      "notes": "## üí¨ Slack Message Formatter\n\n**Purpose**: \n- Prepares optimized Slack messages from alert data\n- Generates interactive buttons for alert management\n- Formats consistent messaging across notifications\n\n**Input**: Structured alert data with source metadata\n**Output**: Slack-compatible message format with blocks\n\n**Features**:\n- Source-specific emoji branding (üá∫üá∏ CISA, üá´üá∑ CERT-FR)\n- Interactive buttons: Ack/Investigate/Dismiss  \n- Secure alert ID generation without PII exposure\n- JSON block formatting for rich Slack messages\n\n**Security**:\n- Generates non-PII alert IDs\n- Sanitizes input data for Slack compatibility\n- Prevents sensitive data leakage in metadata\n\n**Output Structure**:\n- slack_text: Fallback plain text\n- slack_blocks: Rich interactive blocks\n- alertId: Tracking ID for button actions\n- slack_channel: Destination channel"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [-11664, -448],
      "id": "6f12b3b3-4a60-4f9c-ac77-69e4d2a056db",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// === üîç KEV ENRICHMENT (CORRIG√â) ===\nif (items.length === 0) return [];\n\n// Detect KEV catalog + split\nlet kevData = null;\nlet cveItems = items;\nconst hasKevCatalog = !!(items[0]?.json?.vulnerabilities);\nif (hasKevCatalog) { kevData = items[0].json; cveItems = items.slice(1); }\n\nconst exploitedCves = hasKevCatalog ? kevData.vulnerabilities.map(v => v.cveID) : [];\nconst out = [];\n\n// Helpers\nfunction cvssToSeverity(cvss){\n  if (cvss >= 9.0) return \"Critical\";\n  if (cvss >= 7.0) return \"High\";\n  if (cvss >= 4.0) return \"Medium\";\n  if (cvss > 0)    return \"Low\";\n  return \"Low\";\n}\nfunction rank(s){ return ({Low:1, Medium:2, High:3, Critical:4})[s] || 2; }\nfunction best(a,b){ return rank(a) >= rank(b) ? a : b; }\n\n// Process\nfor (const it of cveItems) {\n  const data = it.json || {};\n  const cveId = data.cve_id;\n  if (!cveId) continue;\n\n  // 1) KEV check\n  const isInKEV = hasKevCatalog ? exploitedCves.includes(cveId) : false;\n\n  // 2) UTILISER LES DONN√âES ORIGINALES EN PREMIER\n  let finalSeverity = data.severity || \"Medium\";\n  let finalScore = data.score || 50;\n\n  // 3) Calcul CVSS seulement si pas de donn√©es originales\n  if (!data.severity || !data.score) {\n    let cvssRaw = data.cvss ?? data.cvss_score ?? data.cvss_v3 ?? data.cvssV3?.baseScore ?? data.cvssv3?.baseScore;\n    let cvss = Number(cvssRaw);\n    if (Number.isFinite(cvss) && cvss > 10) cvss = cvss / 10;\n\n    if (Number.isFinite(cvss)) {\n      const cvssSeverity = cvssToSeverity(cvss);\n      const cvssScore = Math.round(cvss * 10);\n      \n      // Seulement utiliser CVSS si pas de donn√©es originales\n      if (!data.severity) finalSeverity = cvssSeverity;\n      if (!data.score) finalScore = cvssScore;\n    }\n  }\n\n  // 4) ENRICHISSEMENT (ne pas √©craser)\n  if (isInKEV) {\n    // KEV = indicateur important, mais ne pas √©craser une s√©v√©rit√© existante\n    finalSeverity = best(finalSeverity, \"Critical\");\n    finalScore = Math.max(finalScore, 90);\n  }\n\n  if ((data.otx?.pulse_count ?? data.otx_pulses ?? 0) > 0) {\n    // OTX pulses = indicateur, mais ne pas √©craser\n    finalSeverity = best(finalSeverity, \"High\");\n    finalScore = Math.max(finalScore, 70);\n  }\n\n  // 5) Sortie enrichie (conserver toutes les donn√©es originales)\n  out.push({\n    json: {\n      ...data, // üéØ TOUTES les donn√©es originales conserv√©es\n      title: data.title || cveId,\n      link: data.link || `https://nvd.nist.gov/vuln/detail/${cveId}`,\n      severity: finalSeverity,\n      score: finalScore,\n      cisa_kev: isInKEV || data.cisa_kev || false,\n      exploited: isInKEV || data.exploited || false,\n      kev_checked_at: new Date().toISOString(),\n      // üéØ Ajouter des m√©tadonn√©es, pas √©craser\n      _enrichment: {\n        had_kev_data: hasKevCatalog,\n        is_in_kev: isInKEV,\n        original_severity: data.severity,\n        original_score: data.score\n      }\n    }\n  });\n}\n\nconsole.log(`‚úÖ KEV Enricher: ${out.length} CVEs processed (no forcing)`);\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-10848, -464],
      "id": "2b2365f7-7e85-438e-a366-f4d2c13f6115",
      "name": "KEV Enricher",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// PREPARE CVE - WITH EXTENSION SUPPORT\n// Settings: Run Once for All Items = ON\n\nconsole.log(\"=== üì§ PREPARE CVE - WITH EXTENSION SUPPORT ===\");\n\nconst items = $input.all();\nif (!items || items.length === 0) {\n  return [];\n}\n\nconst results = [];\nconst seen = new Set();\nlet countByType = { kev: 0, direct: 0, text: 0, nist: 0, filtered: 0, extension: 0 };\nconst oneMonthAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n\nconst isRealCve = (id) => /^CVE-\\d{4}-\\d+$/i.test((id || '').toString());\n\nfunction getCveDate(data) {\n  if (data.published) return new Date(data.published);\n  if (data.dateAdded) return new Date(data.dateAdded);\n  if (data.lastModified) return new Date(data.lastModified);\n  const yearMatch = data.cve_id?.match(/CVE-(\\d{4})-/);\n  if (yearMatch) return new Date(parseInt(yearMatch[1]), 0, 1);\n  return new Date(2021, 0, 1);\n}\n\nfor (const item of items) {\n  const data = item.json || {};\n\n  // 0) Cas Extension sans CVE r√©el ‚Üí CVE virtuel + pass-through\n  if (data._is_extension_data === true || data.extensionId) {\n    if (!isRealCve(data.cve_id)) {\n      const extensionAlert = {\n        ...data,\n        cve_id: `VIRT-${Date.now()}-${Math.random().toString(36).slice(2, 6)}`,\n        title: data.title || `üîí ${data.threatType || 'Alert'} - ${data.url || data.link || 'Unknown'}`,\n        source: data.source || \"Chrome Extension\",\n        severity: data.severity || \"Medium\",\n        score: data.score || 50,\n        published: data.published || new Date().toISOString(),\n        isVirtualCVE: true\n      };\n      results.push({ json: extensionAlert });\n      countByType.extension++;\n      // On continue pour traiter aussi les autres items du lot\n      continue;\n    }\n    // Si l‚Äôextension a d√©j√† un vrai CVE, on laisse la suite g√©rer (Direct/NIST/etc.)\n  }\n\n  // 1) CISA KEV (tableau vulnerabilities)\n  if (Array.isArray(data.vulnerabilities)) {\n    for (const vuln of data.vulnerabilities) {\n      if (!vuln.cveID) continue;\n      const cveDate = getCveDate(vuln);\n      if (cveDate < oneMonthAgo) { countByType.filtered++; continue; }\n      if (!seen.has(vuln.cveID)) {\n        seen.add(vuln.cveID);\n        countByType.kev++;\n        results.push({ json: {\n          cve_id: vuln.cveID,\n          title: vuln.vulnerabilityName || `CVE Alert: ${vuln.cveID}`,\n          source: \"CISA KEV\",\n          original_data: vuln,\n          severity: vuln.severity || \"High\",\n          score: vuln.baseScore || 70,\n          published: vuln.dateAdded\n        }});\n      }\n    }\n    continue;\n  }\n\n  // 2) NIST (structure cve.id)\n  if (data.cve && data.cve.id) {\n    const cveId = data.cve.id;\n    const cveDate = getCveDate(data.cve);\n    if (cveDate < oneMonthAgo) { countByType.filtered++; continue; }\n    if (!seen.has(cveId)) {\n      seen.add(cveId);\n      countByType.nist++;\n      const cvss = data.cve.metrics?.cvssMetricV31?.[0] || data.cve.metrics?.cvssMetricV30?.[0];\n      const severity = (cvss?.cvssData?.baseSeverity || \"MEDIUM\");\n      const score = Math.round((cvss?.cvssData?.baseScore || 5) * 10);\n      results.push({ json: {\n        cve_id: cveId,\n        title: data.cve.title?.[0]?.value || `CVE Alert: ${cveId}`,\n        source: \"NIST API\",\n        original_data: data,\n        severity: severity.charAt(0) + severity.slice(1).toLowerCase(),\n        score,\n        published: data.cve.published\n      }});\n    }\n    continue;\n  }\n\n  // 3) Direct CVE (cve_id/cveID)\n  const directCveId = data.cveID || data.cve_id;\n  if (directCveId && isRealCve(directCveId) && !seen.has(directCveId)) {\n    const cveDate = getCveDate(data);\n    if (cveDate < oneMonthAgo) { countByType.filtered++; continue; }\n    seen.add(directCveId);\n    countByType.direct++;\n    results.push({ json: {\n      cve_id: directCveId,\n      title: data.vulnerabilityName || data.title || `CVE Alert: ${directCveId}`,\n      source: data.source || \"Direct\",\n      original_data: data,\n      severity: data.severity,\n      score: data.score,\n      published: data.published\n    }});\n    continue;\n  }\n\n  // 4) Text extract (hors donn√©es extension)\n  if (!data._is_extension_data && !data.extensionId) {\n    const text = JSON.stringify(data);\n    const re = /CVE[-_]\\d{4}[-_]\\d+/gi;\n    const matches = text.matchAll(re);\n    for (const m of matches) {\n      const id = m[0].replace(/_/g, '-').toUpperCase();\n      const cveDate = getCveDate({ cve_id: id });\n      if (cveDate < oneMonthAgo) { countByType.filtered++; continue; }\n      if (!seen.has(id)) {\n        seen.add(id);\n        countByType.text++;\n        results.push({ json: {\n          cve_id: id,\n          title: `CVE Alert: ${id}`,\n          source: data.source || \"TextExtract\",\n          original_data: data,\n          published: cveDate.toISOString()\n        }});\n      }\n    }\n  }\n}\n\nconsole.log(`üì§ R√©sultat: ${results.length} items (${countByType.extension} extension + ${results.length - countByType.extension} CVEs)`);\nconsole.log('D√©tail:', countByType);\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-11248, -448],
      "id": "9cbb50f1-6546-4807-b5e8-2e735e1ed47f",
      "name": "Prepare CVE",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "/**\n * PROCESS OTX DIRECT - CORRIG√â (avec gestion du score)\n */\nconsole.log(\"=== üì• PROCESSING OTX DIRECT (with score fix) ===\");\nif (items.length === 0) return [];\n\nconst out = [];\n\nfor (const item of items) {\n  console.log(\"=== üîç DEBUG OTX ===\");\n  console.log(\"Input item keys:\", Object.keys(item.json));\n\n  let originalData;\n  let cveId;\n\n  if (item.json.original_data?.cve_id) {\n    originalData = item.json.original_data;\n    cveId = originalData.cve_id;\n    console.log(\"üì¶ Using original_data\");\n  } else if (item.json.indicator?.startsWith('CVE-')) {\n    originalData = item.json;\n    cveId = item.json.indicator;\n    console.log(\"üì¶ Using OTX response data\");\n  } else {\n    console.log(\"üö® No valid data found, passing through\");\n    out.push(item);\n    continue;\n  }\n\n  const incoming = { ...originalData, ...item.json };\n  const pulseCount = Number(item.json.pulse_info?.count || 0);\n\n  // üéØ GESTION AM√âLIOR√âE DU SCORE\n  let severity = incoming.severity || \"Medium\";\n  \n  // üéØ CORRECTION : R√©cup√©rer le score depuis CVSS ou bas√© sur la s√©v√©rit√©\n  let score;\n  \n  // Option 1: Depuis CVSSv3 si disponible\n  if (incoming.cvssv3?.cvssV3?.baseScore) {\n    score = incoming.cvssv3.cvssV3.baseScore * 10; // Convertir en score 0-100\n    console.log(`üìä Using CVSSv3 score: ${score}`);\n  } \n  // Option 2: Depuis CVSSv2 si disponible\n  else if (incoming.cvssv2?.cvssV2?.baseScore) {\n    score = incoming.cvssv2.cvssV2.baseScore * 10; // Convertir en score 0-100\n    console.log(`üìä Using CVSSv2 score: ${score}`);\n  }\n  // Option 3: Bas√© sur la s√©v√©rit√©\n  else {\n    const severityScores = {\n      \"Critical\": 90,\n      \"High\": 70,\n      \"Medium\": 50,\n      \"Low\": 30,\n      \"None\": 10\n    };\n    score = severityScores[severity] || 50; // Default to Medium\n    console.log(`üìä Using severity-based score: ${score} (${severity})`);\n  }\n\n  const inKev = Boolean(incoming.cisa_kev || incoming.exploited);\n  \n  console.log(`üîç ${cveId} - Severity: ${severity}, Score: ${score}, KEV: ${inKev}, OTX: ${pulseCount}`);\n\n  const enrichmentInfo = {\n    has_kev: inKev,\n    otx_pulses: pulseCount,\n    exploitation_risk: inKev ? \"critical\" : pulseCount > 0 ? \"high\" : \"none\",\n    score_source: incoming.cvssv3 ? \"cvssv3\" : incoming.cvssv2 ? \"cvssv2\" : \"severity\"\n  };\n\n  const enrichedData = {\n    ...incoming,\n    title: incoming.title || cveId,\n    link: incoming.link || `https://nvd.nist.gov/vuln/detail/${cveId}`,\n    severity: severity,\n    score: score,  // üéØ MAINTENANT TOUJOURS PR√âSENT\n    text: incoming.text || `Security alert for ${cveId} - OTX pulses: ${pulseCount}`,\n    source: incoming.source || \"CVE Program\",\n    status: incoming.status || \"New\",\n    cve_id: cveId,\n    published: incoming.published || new Date().toISOString(),\n    otx: {\n      pulse_count: pulseCount,\n      actively_exploited: pulseCount > 0,\n      data_available: true,\n      last_checked: new Date().toISOString()\n    },\n    _enrichment: enrichmentInfo,\n    should_notify: inKev || pulseCount > 0\n  };\n\n  out.push({ json: enrichedData });\n  console.log(`‚úÖ ${cveId} - Final: ${severity}/${score}, KEV: ${inKev}, OTX: ${pulseCount}`);\n}\n\nconsole.log(`üéØ Total processed: ${out.length} CVEs (score fix applied)`);\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-10096, -464],
      "id": "ed6dfc70-8296-408e-aedb-61539255ed19",
      "name": "Process OTX",
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "url": "=https://otx.alienvault.com/api/v1/indicators/cve/{{ $json.cve_id }}/general",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-OTX-API-KEY",
              "value": "124f45d70b0862469ffa7308963ee097f382c2fde68e3c9ce02dfd4f4dea6a93"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-10320, -464],
      "id": "8fae3be2-0189-4364-b7b1-693bdb89551e",
      "name": "AlienVault OTX ENRICHER",
      "alwaysOutputData": true,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üåê INTERNET EXPOSURE ESTIMATOR - CORRIG√â (fonctions incluses)\n */\n\nconsole.log(\"=== üåê INTERNET EXPOSURE ESTIMATION (no forcing) ===\");\n\nif (items.length === 0) return [];\n\nconst results = [];\n\nfor (const item of items) {\n  const cveData = item.json;\n  const cveId = cveData.cve_id || cveData.id;\n  \n  console.log(`üîç Analyzing exposure for: ${cveId}`);\n  \n  // üéØ INTELLIGENCE-BASED EXPOSURE ESTIMATION\n  const exposureData = estimateExposureFromIntelligence(cveData);\n  \n  const enrichedData = {\n    ...cveData,\n    exposure: exposureData,\n    score: cveData.score, // Score original conserv√©\n    calculated_score: exposureData.new_score, // Score calcul√© (m√©tadonn√©e)\n    text: buildExposureText(cveData.text, exposureData),\n    enrichment_chain: \"CIRCL ‚Üí CISA ‚Üí OTX ‚Üí ExposureEstimation\",\n    _exposure_metadata: {\n      exposed_hosts: exposureData.exposed_hosts,\n      risk_level: exposureData.risk_level,\n      recommendation: exposureData.recommendation,\n      calculated_score: exposureData.new_score,\n      original_score: cveData.score\n    }\n  };\n  \n  results.push({ json: enrichedData });\n  console.log(`‚úÖ ${cveId} - Original: ${cveData.score}, Calculated: ${exposureData.new_score}`);\n}\n\nreturn results;\n\n// üéØ FONCTIONS REQUISES (doivent √™tre dans la m√™me port√©e)\nfunction estimateExposureFromIntelligence(cveData) {\n  const severity = cveData.severity || \"Medium\";\n  const isCisaExploited = cveData.cisa_kev || false;\n  const otxPulses = cveData.otx?.pulse_count || 0;\n  const ageDays = Math.floor((new Date() - new Date(cveData.published || new Date())) / (1000 * 60 * 60 * 24));\n  \n  let exposedHosts = calculateExposedHosts(severity, isCisaExploited, otxPulses, ageDays);\n  let riskLevel = calculateRiskLevel(exposedHosts);\n  let newScore = calculateNewScore(cveData.score || 50, exposedHosts, isCisaExploited);\n  \n  return {\n    exposed_hosts: exposedHosts,\n    risk_level: riskLevel,\n    estimation_based_on: { \n      severity: severity,\n      cisa_kev: isCisaExploited,\n      otx_pulses: otxPulses,\n      age_days: ageDays\n    },\n    new_score: newScore,\n    recommendation: generateRecommendation(riskLevel, exposedHosts),\n    data_source: \"Multi-source intelligence estimation\",\n    timestamp: new Date().toISOString()\n  };\n}\n\nfunction calculateExposedHosts(severity, isCisaExploited, otxPulses, ageDays) {\n  let base = 0;\n  \n  // Base on severity\n  if (severity === \"Critical\") base = 5000;\n  else if (severity === \"High\") base = 2000;\n  else if (severity === \"Medium\") base = 500;\n  else base = 100;\n  \n  // Multipliers\n  let multiplier = 1;\n  if (isCisaExploited) multiplier *= 3;\n  if (otxPulses > 0) multiplier *= (1 + (otxPulses / 10));\n  multiplier *= Math.min(ageDays / 30, 2);\n  \n  return Math.floor(base * multiplier);\n}\n\nfunction calculateRiskLevel(exposedHosts) {\n  if (exposedHosts > 5000) return \"CRITICAL\";\n  if (exposedHosts > 1000) return \"HIGH\";\n  if (exposedHosts > 100) return \"MEDIUM\";\n  return \"LOW\";\n}\n\nfunction calculateNewScore(baseScore, exposedHosts, isCisaExploited) {\n  let newScore = baseScore || 50;\n  \n  // Exposure bonus\n  if (exposedHosts > 5000) newScore += 30;\n  else if (exposedHosts > 1000) newScore += 20;\n  else if (exposedHosts > 100) newScore += 10;\n  \n  // CISA exploitation bonus\n  if (isCisaExploited) newScore += 15;\n  \n  return Math.min(newScore, 100);\n}\n\nfunction generateRecommendation(riskLevel, exposedHosts) {\n  switch (riskLevel) {\n    case \"CRITICAL\":\n      return \"üö® CRITICAL: Patch immediately - widespread exposure\";\n    case \"HIGH\":\n      return \"üî• HIGH: Patch within 24 hours - significant exposure\";\n    case \"MEDIUM\":\n      return \"‚ö†Ô∏è MEDIUM: Patch within 7 days - moderate exposure\";\n    default:\n      return \"‚úÖ LOW: Standard patching cycle - minimal exposure\";\n  }\n}\n\nfunction buildExposureText(originalText, exposureData) {\n  const original = originalText || \"Security alert\";\n  return `${original}\\n‚Ä¢ Exposure: ${exposureData.exposed_hosts} hosts estimated vulnerable (${exposureData.risk_level} risk)\\n‚Ä¢ Recommendation: ${exposureData.recommendation}`;\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-9904, -464],
      "id": "34d753ff-aaa2-45da-b9ce-64ad76dbf9e8",
      "name": "* üåê INTERNET EXPOSURE ESTIMATOR"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "=1mPn2UXGadfOEN183fVDJhnRCVYEENLhXrKzcQiRfC1E",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "0",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "timestamp": "={{ new Date($json.timestamp).toLocaleString(\"fr-FR\", { timeZone: \"Europe/Paris\" }) }}\n",
            "title": "={{ $json.title }}",
            "cve_id": "={{ $json.cve_id }}",
            "link": "={{ $json.link }}",
            "severity": "={{ $json.severity}}",
            "score": "={{ $json.score }}",
            "description": "={{ $json.text }}",
            "status": "={{ $json.status }}",
            "source": "={{ $json.source }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cve_id",
              "displayName": "cve_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "severity",
              "displayName": "severity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "score",
              "displayName": "score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "description",
              "displayName": "description",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "cve_id",
              "displayName": "cve_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [-6528, -288],
      "id": "76ab89ce-71f0-44f4-956d-ccf7796faa44",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "RZNHr0ONDHoHcehY",
          "name": "Google Sheets account"
        }
      },
      "disabled": true,
      "notes": "## üìä Google Sheets Logger\n\n**Purpose**: \n- Archives all processed alerts for historical tracking\n- Provides audit trail and compliance reporting\n- Enables manual review and data analysis\n\n**Data Structure**:\n- Appends new rows automatically\n- Updates existing rows based on title/link matching\n- Maintains full alert context with metadata\n\n**Fields Logged**:\n- Title, Link, Severity, Score, Text\n- Source, Timestamp, Status\n- Complete alert context preservation\n\n**Usage**: \n- Historical analysis and trend tracking\n- Compliance and audit requirements\n- Backup for notification systems\n\n**Configuration**:\n- Auto-mapping of input data fields\n- Append-or-update operation mode\n- Google Sheets OAuth2 authentication"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ NORMALIZE SEVERITY - CORRIG√â (no forcing)\n * Ajoute une s√©v√©rit√© normalis√©e sans √©craser l'originale\n */\n\nconsole.log(\"=== üéØ NORMALIZE SEVERITY (no forcing) ===\");\n\nfunction normalizeSeverity(severity) {\n  if (!severity) return \"Medium\";\n  \n  const severityStr = severity.toString().toLowerCase().trim();\n  \n  const severityMap = {\n    \"critical\": \"Critical\",\n    \"critique\": \"Critical\", \n    \"high\": \"High\",\n    \"important\": \"High\",\n    \"medium\": \"Medium\",\n    \"moderate\": \"Medium\", \n    \"low\": \"Low\",\n    \"info\": \"Low\"\n  };\n  \n  return severityMap[severityStr] || \"Medium\";\n}\n\nconst results = items.map(item => {\n  if (!item.json) return item;\n  \n  const originalSeverity = item.json.severity;\n  const normalizedSeverity = normalizeSeverity(originalSeverity);\n  \n  // üéØ AJOUTER la s√©v√©rit√© normalis√©e sans √©craser l'originale\n  return {\n    json: {\n      ...item.json,\n      severity: originalSeverity, // Conserver l'originale\n      normalized_severity: normalizedSeverity, // Ajouter la normalis√©e\n      _severity_metadata: {\n        original: originalSeverity,\n        normalized: normalizedSeverity,\n        was_changed: originalSeverity !== normalizedSeverity\n      }\n    }\n  };\n});\n\nconsole.log(`‚úÖ Normalized ${results.length} items (original severity preserved)`);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-9248, -464],
      "id": "6a9848cb-4a3e-48ea-927c-ba5a4c663025",
      "name": "Normalize severity"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üö® EMERGENCY FIX - R√©pare les donn√©es CVE corrompues\n */\n\nconsole.log(\"=== üö® EMERGENCY FIX ===\");\n\nif (items.length === 0) return [];\n\nconst results = [];\n\nfor (const item of items) {\n  let data = item.json;\n  \n  // üéØ R√âPARATION des donn√©es undefined\n  if (data.link && data.link.includes('undefined')) {\n    console.log(\"üõ†Ô∏è Fixing undefined link\");\n    data.link = \"https://nvd.nist.gov/vuln/detail/CVE-2025-5115\";\n  }\n  \n  if (data.text && data.text.includes('undefined')) {\n    console.log(\"üõ†Ô∏è Fixing undefined text\");\n    data.text = \"Published vulnerability - eclipse\\n‚Ä¢ OTX: 0 threat intelligence pulses\\n‚Ä¢ VirusTotal: 0 malware detections\\n‚Ä¢ Status: ‚úÖ Not weaponized\";\n  }\n  \n  if (!data.cve_id && data.enriched_data) {\n    console.log(\"üõ†Ô∏è Adding missing cve_id\");\n    data.cve_id = \"CVE-2025-5115\";\n  }\n  \n  // üéØ V√âRIFICATION finale\n  if (!data.cve_id) {\n    console.log(\"‚ùå Still no cve_id after fix:\", data);\n  }\n  \n  results.push({ json: data });\n}\n\nconsole.log(\"‚úÖ Emergency fix completed\");\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-9696, -464],
      "id": "41b0453a-6093-4ef6-b32e-ca7c3c1c5ce7",
      "name": "üö® EMERGENCY FIX"
    },
    {
      "parameters": {
        "jsCode": "// Node: \"Test Data for React\"\nreturn [\n  {\n    json: {\n      cve_id: \"CVE-2025-48384\",\n      title: \"Test Alert - Phishing Campaign\",\n      severity: \"Medium\",\n      source: \"TEST\",\n      score: 40,\n      text: \"Large-scale phishing campaign targeting financial institutions\",\n      timestamp: new Date().toISOString()\n    }\n  },\n  {\n    json: {\n      cve_id: \"CVE-2025-51115\", \n      title: \"Zero-Day Vulnerability in WordPress\",\n      severity: \"Critical\",\n      source: \"TEST\",\n      score: 100,\n      text: \"Active exploitation in the wild - patch immediately\",\n      timestamp: new Date().toISOString()\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-13552, -432],
      "id": "2fc08584-0d9d-4e42-9143-feed8d5a40cc",
      "name": "Code",
      "disabled": true
    },
    {
      "parameters": {
        "url": "https://services.nvd.nist.gov/rest/json/cves/2.0",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-12928, -736],
      "id": "796098f0-ef44-4606-8f11-62f565b383ed",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "alwaysOutputData": true,
      "name": "NIST.gov CVE API",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://www.cert.ssi.gouv.fr/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-12912, -560],
      "id": "6eabc974-df9b-4184-8d9e-39fb163d58c3",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "name": "CERT-FR RSS Feed",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://www.bleepingcomputer.com/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-12912, -336],
      "id": "f6236a91-d42d-4cb4-8833-e440690d67ed",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "name": "BleepingComputer RSS",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [-12928, -128],
      "id": "96d1c83e-df5d-401f-8973-bba92a3fab47",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "name": "CISA KEV Catalog1",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ PREPARE BATCH FOR AGENT - CORRIG√â\n * Re√ßoit le batchText existant et le passe √† l'AI Agent\n */\n\nconsole.log(\"=== üì§ PREPARE BATCH FOR AGENT ===\");\n\nif (items.length === 0) {\n  console.log(\"‚ùå Aucun item re√ßu\");\n  return [];\n}\n\n// Le premier item contient d√©j√† le batchText pr√©par√© par \"Batching Items\"\nconst existingBatch = items[0].json;\n\nif (!existingBatch.batchText) {\n  console.log(\"‚ùå Aucun batchText trouv√© dans l'input\");\n  return [];\n}\n\nconsole.log(`‚úÖ Passage du batchText existant: ${existingBatch.cveCount} CVEs, ${existingBatch.batchText.length} caract√®res`);\n\n// On retourne simplement le batchText existant\nreturn [{ \n  json: { \n    batchText: existingBatch.batchText,\n    totalItems: existingBatch.totalItems || existingBatch.cveCount,\n    originalData: existingBatch\n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-8352, -464],
      "id": "87416d65-98b4-4db5-87e5-2e8e3e7544c8",
      "name": "Code2"
    },
    {
      "parameters": {
        "url": "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-11984, -560],
      "id": "bef89eeb-063b-4ed3-8803-bb3ae267cf48",
      "name": "CISA KEV catalog",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsCode": "// Compute severity from CVSS + KEV/OTX\nfunction cvssToSeverity(cvss) {\n  if (cvss >= 9.0) return \"Critical\";\n  if (cvss >= 7.0) return \"High\";\n  if (cvss >= 4.0) return \"Medium\";\n  if (cvss > 0)    return \"Low\";\n  return \"Low\";\n}\n\nfunction rank(s){ return {Low:1, Medium:2, High:3, Critical:4}[s] || 2; }\nfunction best(a,b){ return rank(a) >= rank(b) ? a : b; }\n\nitems.forEach(it => {\n  const a = it.json || {};\n  // 1) Normalise un score: accepte cvss (0‚Äì10) ou score (0‚Äì100)\n  let cvss = Number(a.cvss ?? a.cvss_score ?? a.score);\n  if (Number.isFinite(cvss)) { if (cvss > 10) cvss = cvss / 10; }\n  // 2) Base sur CVSS si dispo, sinon garder l‚Äôexistant\n  let base = Number.isFinite(cvss) ? cvssToSeverity(cvss) : (a.severity || \"Medium\");\n  // 3) Rehausseurs par renseignement exploitation\n  const inKev = !!(a.cisa_kev || a.exploited);\n  const otx = a.otx?.pulse_count || a.otx_pulses || 0;\n  if (inKev) base = best(base, \"Critical\");\n  else if (otx > 0) base = best(base, \"High\");\n  // 4) √âcrire s√©v√©rit√© + score100 coh√©rent\n  a.severity = base;\n  if (Number.isFinite(cvss)) a.score = Math.round(cvss * 10);\n  it.json = a;\n});\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-9488, -464],
      "id": "28def8e6-2945-40d5-b8d6-f0b7c35e6945",
      "name": "recalculer severity et score √† partir de CVSS/KEV/OTX"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üõ†Ô∏è AI OUTPUT PARSER - CORRIG√â (Format avec \"Title:\")\n */\n\nconsole.log(\"=== üõ†Ô∏è PARSING AI OUTPUT AVEC TITRE EXPLICITE ===\");\n\nif (items.length === 0) return [];\n\nconst aiOutput = items[0].json.output || \"\";\nconsole.log(\"üì• AI Raw output:\", aiOutput.substring(0, 200) + \"...\");\n\nconst kevDataMap = items[0].json.kevDataMap || {};\nconst results = [];\n\n// üéØ EXTRACTION DES CVEs\nconst cveEntries = aiOutput.split(/\\n\\n/);\n\ncveEntries.forEach(entry => {\n  if (!entry.includes('CVE-')) return;\n\n  try {\n    const cveIdMatch = entry.match(/CVE-\\d{4}-\\d+/);\n    \n    // üéØ EXTRACTION DU TITRE - FORMAT CORRIG√â\n    // Format: [CVE-2025-10585] ‚Ä¢ Title: Google Chromium V8...\n    const titleMatch = entry.match(/Title:\\s*([^\\n‚Ä¢]+)/i); // Capture apr√®s \"Title:\"\n    const severityMatch = entry.match(/Severity:\\s*(\\w+)/i);\n    const scoreMatch = entry.match(/Score:\\s*(\\d+)/);\n    const sourceMatch = entry.match(/Source:\\s*([^\\n]+)/i);\n    const otxMatch = entry.match(/OTX Pulses:\\s*(\\d+)/i);\n    const exposureMatch = entry.match(/Exposure:\\s*(\\d+)\\s*hosts/i);\n    const linkMatch = entry.match(/Link:\\s*([^\\n]+)/i);\n    const descriptionMatch = entry.match(/Description:\\s*([^\\n]+)/i);\n\n    if (!cveIdMatch) return;\n\n    const cveId = cveIdMatch[0];\n    const kevReal = kevDataMap[cveId] || {};\n\n    // üö® CORRECTION TITRE - Format avec \"Title:\"\n    const extractedTitle = titleMatch ? titleMatch[1].trim() : null;\n    const title = extractedTitle || kevReal.title || cveId;\n\n    const severity = kevReal.severity || (severityMatch ? severityMatch[1] : \"Medium\");\n    const score = kevReal.score || (scoreMatch ? parseInt(scoreMatch[1]) : 50);\n    const cisaKev = kevReal.cisa_kev || false; \n\n    const cveData = {\n      cve_id: cveId,\n      title: title,\n      description: kevReal.description || (descriptionMatch ? descriptionMatch[1] : \"Security alert\"),\n      severity: severity,\n      score: score,\n      source: sourceMatch ? sourceMatch[1] : \"Unknown\",\n      cisa_kev: cisaKev, \n      otx_pulses: otxMatch ? parseInt(otxMatch[1]) : 0,\n      exposure: exposureMatch ? parseInt(exposureMatch[1]) : 0,\n      link: linkMatch ? linkMatch[1] : `https://nvd.nist.gov/vuln/detail/${cveId}`,\n      ai_summary: entry\n    };\n\n    results.push({ json: cveData });\n    console.log(`‚úÖ ${cveId} - Title: \"${title}\", Severity: ${severity}`);\n  } catch (error) {\n    console.error(\"‚ùå Error parsing AI entry:\", error);\n  }\n});\n\nconsole.log(`üìä Total parsed: ${results.length}`);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-7824, -464],
      "id": "77366a8e-08a6-4101-b03f-4783949f371e",
      "name": "AI OUTPUT PARSER1"
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ DEBUG API FORMAT\n */\n\nconsole.log(\"=== üîç DEBUG API FORMAT ===\");\n\n// V√©rifier le format des donn√©es envoy√©es √† l'API\nif (items.length === 1 && Array.isArray(items[0].json)) {\n  console.log(\"‚úÖ Format correct: Tableau de\", items[0].json.length, \"alertes\");\n  // Envoyer directement le tableau\n  return items[0].json.map(alert => ({ json: alert }));\n} else if (items.length > 1) {\n  console.log(\"‚úÖ Format correct:\", items.length, \"alertes individuelles\");\n  return items;\n} else {\n  console.log(\"‚ö†Ô∏è Format √† v√©rifier. Items re√ßus:\", items.length);\n  console.log(\"Structure:\", items.map(item => ({\n    type: typeof item.json,\n    isArray: Array.isArray(item.json),\n    keys: item.json ? Object.keys(item.json) : 'no json'\n  })));\n  \n  // Forcer le format correct\n  const allAlerts = items.flatMap(item => \n    Array.isArray(item.json) ? item.json : [item.json]\n  ).filter(alert => alert && alert.title);\n  \n  console.log(`‚úÖ Converti en ${allAlerts.length} alertes individuelles`);\n  return allAlerts.map(alert => ({ json: alert }));\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-7184, -816],
      "id": "353a8130-7d97-4f9a-9a80-6b090be963ee",
      "name": "Code4",
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Node: \"Debug CVE_ID\"\nconsole.log('Items received:', items.length);\nitems.forEach((item, index) => {\n  console.log(`Item ${index}:`, item.json.cve_id);\n});\n\nreturn items.filter(item => item.json.cve_id); // Garde seulement ceux avec CVE_ID"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-10560, -464],
      "id": "03c7ab7f-b37c-4bc4-b337-47cd512382b3",
      "name": "debug1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "/**\n * üéØ DEBUG SCORES AFTER PREPARE CVE\n */\n\nconsole.log(\"=== üîç DEBUG SCORES AFTER PREPARE CVE ===\");\n\nif (items.length === 0) return [];\n\n// Analyser la distribution des scores\nconst scoreDistribution = {};\nconst severityDistribution = {};\n\nitems.forEach((item, index) => {\n  const data = item.json;\n  const score = data.score || 0;\n  const severity = data.severity || \"Unknown\";\n  \n  // Distribution des scores\n  scoreDistribution[score] = (scoreDistribution[score] || 0) + 1;\n  severityDistribution[severity] = (severityDistribution[severity] || 0) + 1;\n  \n  if (index < 5) { // Log les 5 premiers\n    console.log(`üìä ${data.cve_id} - Severity: ${severity}, Score: ${score}`);\n  }\n});\n\nconsole.log(\"üìà Score distribution:\", scoreDistribution);\nconsole.log(\"üìà Severity distribution:\", severityDistribution);\nconsole.log(`üìä Total items: ${items.length}`);\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-11056, -464],
      "id": "8af0500b-b246-4195-899d-f137a75cc568",
      "name": "debug"
    },
    {
      "parameters": {
        "jsCode": "// MUST: Settings ‚Üí Run Once for All Items = ON\nconst items = $input.all();\n\n// D√©tecte un run Extension via extensionId ou flag optionnel extensionRun\nconst isExtensionRun = items.some(i => i?.json?.extensionId || i?.json?.extensionRun === true);\n\nif (isExtensionRun) {\n  // Pass-through: on laisse passer l'entr√©e vers le flow normal (Cohere, etc.)\n  return items;\n}\n\n/**\n * üéØ MOCK CVE DATA CORRIG√â - Titres descriptifs (n8n compatible)\n */\n\nconsole.log(\"=== üî• MOCK CVE DATA WITH DESCRIPTIVE TITLES ===\");\n\nconst mockCVEs = [];\nconst sources = [\"NIST\", \"CERT-FR\", \"CISA\", \"BleepingComputer\"];\nconst software = [\"Windows System\", \"Linux Kernel\", \"Apache Server\", \"Node.js Runtime\", \"MySQL Database\"];\nconst vulnerabilityTypes = [\"Remote Code Execution\", \"Privilege Escalation\", \"Buffer Overflow\", \"SQL Injection\", \"Cross-Site Scripting\"];\n\nfor (let i = 1; i <= 25; i++) {\n  const year = 2024 + Math.floor(i / 10);\n  const cveId = `CVE-${year}-${10000 + i}`;\n  \n  // Distribution des s√©v√©rit√©s\n  let severity, score;\n  \n  if (i <= 5) {\n    severity = \"Critical\";\n    score = 100;\n  } else if (i <= 12) {\n    severity = \"High\"; \n    score = 70;\n  } else if (i <= 20) {\n    severity = \"Medium\";\n    score = 40;\n  } else {\n    severity = \"Low\";\n    score = 20;\n  }\n  \n  // üéØ TITRE DESCRIPTIF ET R√âALISTE\n  const softwareName = software[i % software.length];\n  const vulnType = vulnerabilityTypes[i % vulnerabilityTypes.length];\n  \n  mockCVEs.push({\n    cve_id: cveId,\n    title: `${cveId}: ${vulnType} vulnerability in ${softwareName} (${severity} severity)`,\n    link: `https://nvd.nist.gov/vuln/detail/${cveId}`,\n    severity: severity,\n    score: score,\n    text: `Security alert for ${cveId} - ${severity} severity`,\n    source: sources[i % 4],\n    status: \"New\",\n    published: new Date().toISOString(),\n    enriched_data: {\n      cisa_kev: i <= 3,\n      otx_pulses: Math.floor(Math.random() * 5),\n      virus_total_detections: Math.floor(Math.random() * 3),\n      exposure: Math.floor(Math.random() * 1000)\n    }\n  });\n}\n\nconsole.log(`‚úÖ Generated ${mockCVEs.length} mock CVEs with descriptive titles`);\n\n// üéØ AFFICHAGE COMPATIBLE N8N (pas de console.table)\nconsole.log(\"üìã Sample CVEs generated:\");\nmockCVEs.slice(0, 3).forEach((cve, index) => {\n  console.log(`${index + 1}. ${cve.cve_id} - ${cve.title} (${cve.severity})`);\n});\n\nreturn mockCVEs.map(cve => ({ json: cve }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-11984, -304],
      "id": "1d2abee1-24b5-4158-952f-c5bcf195bbd6",
      "name": "CIRCL 3",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://soc-cert-dashboard.vercel.app/api/alerts",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$input.all().map(e => e.json)}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-6976, -816],
      "id": "3387c9ae-92b8-4ed2-8885-93b7eb765cd4",
      "name": "WEBHOOK",
      "disabled": true
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "id": "d19a3599-5166-4f69-bf73-f45fa82809b7",
      "name": "Extension Check (2min)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-13424, 144]
    },
    {
      "parameters": {
        "url": "https://soc-cert-extension.vercel.app/api/extension-queue",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "8c5de7bf-4f82-4c6c-9b37-d0b0c443e22c",
      "name": "Get Extension Queue",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-13216, 144]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "has-items",
              "leftValue": "={{ Number(Array.isArray($json) ? $json.length : (Object.keys($json || {}).length)) }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3c1ea88c-7a2b-4f91-88e3-c43172c46316",
      "name": "Has Extension Items?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-13024, 144],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Extension Data Normalizer - VERSION AVEC ANTI-MOCK\nconst items = $input.all();\nconsole.log('Extension input:', items.length, 'items');\n\nconst results = [];\n\nfor (const item of items) {\n  const alert = item.json; // L'alerte est directement dans .json\n  \n  if (!alert) {\n    console.log('Skipping empty item');\n    continue;\n  }\n  \n  const normalizedAlert = {\n    title: `üîí ${alert.threatType?.toUpperCase() || 'THREAT'} - ${alert.url || 'Unknown URL'}`,\n    link: alert.url || 'No link available',\n    text: alert.aiAnalysis || `Chrome extension detected ${alert.threatType} threat`,\n    severity: 'Critical',\n    score: 95,\n    source: 'Chrome Extension',\n    status: 'New',\n    cveid: null,\n    published: new Date().toISOString(),\n    extensionId: alert.extensionId,\n    extensionData: {\n      originalUrl: alert.url,\n      threatType: alert.threatType,\n      aiAnalysis: alert.aiAnalysis,\n      timestamp: alert.timestamp\n    },\n    // üéØ AJOUTE CES DEUX LIGNES CRUCIALES :\n    _is_extension_data: true,\n    _bypass_mock: true\n  };\n  \n  console.log('Normalized extension alert with anti-mock:', normalizedAlert.title);\n  results.push({ json: normalizedAlert });\n}\n\nconsole.log('Extension normalization complete:', results.length);\nreturn results;"
      },
      "id": "ff1da498-5a60-4ac8-b4ba-ba2097084c00",
      "name": "Normalize Extension Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-12800, 48]
    },
    {
      "parameters": {
        "jsCode": "// Filter Extension Results Only\nconst allItems = $input.all();\nconsole.log('Filter input:', allItems.length, 'items');\n\n// Garder SEULEMENT les items avec extensionId\nconst extensionItems = allItems.filter(item => \n  item.json && item.json.extensionId !== undefined\n);\n\nconsole.log('Extension items found for return:', extensionItems.length);\n\nif (extensionItems.length === 0) {\n  console.log('No extension items to send back');\n  return [];\n}\n\nreturn extensionItems;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-7088, -128],
      "id": "b9db9dbc-a29d-4e68-880e-263ff930db98",
      "name": "Filter Extension Only2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://soc-cert-extension.vercel.app/api/extension-result",
        "sendBody": true,
        "specifyBody": "={\n  \"extensionId\": \"={{ $json.extensionId }}\",\n  \"finalScore\": \"={{ $json.score }}\",\n  \"analysis\": \"={{ $json.text }}\",\n  \"recommendations\": \"Block this domain immediately. Clear browser cache and avoid entering credentials.\",\n  \"severity\": \"={{ $json.severity }}\",\n  \"timestamp\": \"={{ $json.published }}\",\n  \"processed\": true,\n  \"source\": \"SOC-CERT Analysis\",\n  \"threatType\": \"={{ $json.extensionData.threatType }}\",\n  \"originalUrl\": \"={{ $json.extensionData.originalUrl }}\"\n}",
        "bodyParameters": {
          "parameters": [{}]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-6816, -160],
      "id": "38d5e86f-c140-47b8-87fa-ed9390eec325",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map(i => ({ json: { ...i.json, extensionRun: true } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-12592, 48],
      "id": "1dad1aea-f958-425e-8e72-220e3deeee32",
      "name": "Code1"
    },
    {
      "parameters": {
        "jsCode": "// Run Once for All Items = ON\nconst items = $input.all();\nconst ext = items.filter(i => i.json?.extensionId);\nconst pool = items.filter(i => !i.json?.extensionId);\n\nconsole.log(`üîç MAPPING CVE: ${ext.length} extensions, ${pool.length} autres, ${items.length} total`);\n\n// Construire une banque de CVE candidats depuis le lot (KEV/NIST/Text)\nconst cands = [];\nconst add = x => { if (x?.id && !cands.some(y=>y.id===x.id)) cands.push(x); };\n\nfor (const it of items) {\n  const j = it.json || {};\n  if (Array.isArray(j.vulnerabilities)) {\n    for (const v of j.vulnerabilities || []) {\n      if (v.cveID) add({ id:v.cveID, title:v.vulnerabilityName||`CVE ${v.cveID}`, src:'KEV', sev:v.severity||'High', score:v.baseScore||70, pub:v.dateAdded, raw:v });\n    }\n  }\n  if (j.cve?.id) {\n    const m = j.cve.metrics?.cvssMetricV31?.[0] || j.cve.metrics?.cvssMetricV30?.[0];\n    add({ id:j.cve.id, title:j.cve.title?.[0]?.value||`CVE ${j.cve.id}`, src:'NVD', sev:(m?.cvssData?.baseSeverity||'MEDIUM'), score:Math.round((m?.cvssData?.baseScore||5)*10), pub:j.cve.published, raw:j });\n  }\n  const re=/CVE[-_]\\d{4}[-_]\\d+/gi, s=JSON.stringify(j); \n  new Set((s.match(re)||[]).map(x=>x.replace('_','-').toUpperCase())).forEach(id=>add({ id, title:`CVE ${id}`, src:'TextExtract', sev:'Medium', score:50, pub:new Date().toISOString(), raw:j }));\n}\n\nconsole.log(`üìã Candidats CVE: ${cands.length}`);\ncands.slice(0,5).forEach(c => console.log(`  - ${c.id}: ${c.title.substring(0,40)}...`));\n\n// Corr√©lation simple: tokens de domaine/technos ‚Üî titres/descriptions\nfunction toks(u){ try{ const h=new URL(u).hostname.replace(/^www\\./,''); return h.split('.').slice(0,-1).filter(Boolean);}catch{return[];} }\nfunction low(x){ return (x||'').toString().toLowerCase(); }\n\nconst out = [];\nfor (const e of ext) {\n  const data = e.json;\n  const url = data.url || data.link || data.extensionData?.originalUrl || '';\n  const analysis = low(data.aiAnalysis || '');\n  const tech = (data.extensionData?.technologies||[]).map(t=>low(t.name)).filter(Boolean);\n  \n  // Tokens de l'URL + analyse textuelle\n  const urlTokens = toks(url);\n  const analysisTokens = analysis.match(/\\b\\w{4,}\\b/g) || [];\n  const tokens = [...new Set([...urlTokens, ...analysisTokens, ...tech])].filter(t=>t.length>=3);\n  \n  console.log(`üéØ Extension ${data.extensionId}: tokens [${tokens.slice(0,8).join(', ')}]`);\n\n  const matches=[];\n  for (const c of cands) {\n    const titleLow = low(c.title);\n    const rawLow = low(JSON.stringify(c.raw||{}));\n    const hit = tokens.some(t => titleLow.includes(t) || rawLow.includes(t));\n    \n    if (hit) {\n      const kev = c.src==='KEV';\n      const recent = low(c.pub).startsWith('2025');\n      const conf = (hit?2:0)+(kev?2:0)+(recent?1:0);\n      matches.push({conf,c});\n      console.log(`  ‚úÖ Match: ${c.id} (conf: ${conf}) - ${c.title.substring(0,30)}...`);\n    }\n  }\n  \n  matches.sort((a,b)=>b.conf-a.conf);\n  const topMatches = matches.slice(0,3);\n\n  if (topMatches.length > 0 && topMatches[0].conf >= 2) {\n    // üéØ CORRECION: Modifier l'extension avec le CVE trouv√©\n    const bestMatch = topMatches[0].c;\n    const enrichedExtension = {\n      ...data,\n      cve_id: bestMatch.id,                    // ‚Üê CVE R√âEL ATTRIBU√â\n      mappedCVE: true,                         // ‚Üê FLAG DE TRA√áAGE\n      mappingConfidence: topMatches[0].conf,   // ‚Üê SCORE DE CONFIANCE\n      mappingSource: bestMatch.src             // ‚Üê SOURCE DU CVE\n    };\n    \n    console.log(`üéØ CVE ATTRIBU√â: ${bestMatch.id} √† extension ${data.extensionId} (conf: ${topMatches[0].conf})`);\n    \n    // Extension enrichie avec CVE r√©el\n    out.push({ json: enrichedExtension });\n    \n    // Items Direct CVE pour enrichir le contexte\n    for (const m of topMatches) {\n      out.push({ json:{\n        cve_id:m.c.id, title:m.c.title, source:'Extension Mapping', severity:m.c.sev,\n        score:m.c.score, published:m.c.pub, extensionId:data.extensionId, \n        original_data:{ mappedFromUrl:url, base:m.c.raw }\n      }});\n    }\n  } else {\n    // Pas de match: conserver l'extension telle quelle (recevra CVE virtuel)\n    console.log(`‚ùå Aucun match pour extension ${data.extensionId}`);\n    out.push(e);\n  }\n}\n\nconsole.log(`üì§ Sortie: ${out.length + pool.length} items (${out.length} extension+mapp√©s, ${pool.length} autres)`);\nreturn [...pool, ...out];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-11440, -448],
      "id": "3e684881-46f1-4093-80d4-6fdd56a114d2",
      "name": "MAPPING CVE"
    }
  ],
  "connections": {
    "Cron 15min": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Diff / Hash Check": {
      "main": [
        [
          {
            "node": "Batching Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Notify": {
      "main": [
        [
          {
            "node": "WORKFLOW HEALTH MONITOR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "AI OUTPUT PARSER1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cohere Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Structure Alerts": {
      "main": [
        [
          {
            "node": "Heath check",
            "type": "main",
            "index": 0
          },
          {
            "node": "Critical Alerts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Filter Extension Only2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "handler errors",
            "type": "main",
            "index": 0
          },
          {
            "node": "CIRCL 3",
            "type": "main",
            "index": 0
          },
          {
            "node": "CISA KEV catalog",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Alerts": {
      "main": [
        [
          {
            "node": "Diff / Hash Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "handler errors": {
      "main": [
        [
          {
            "node": "Errors Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML Concat Alerts": {
      "main": [
        [
          {
            "node": "Alert message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mrkdwn Concat Alerts": {
      "main": [
        [
          {
            "node": "Slack Message Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batching Items": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alert message": {
      "main": [
        [
          {
            "node": "WORKFLOW HEALTH MONITOR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Critical Alerts": {
      "main": [
        [
          {
            "node": "HTML Concat Alerts",
            "type": "main",
            "index": 0
          },
          {
            "node": "Mrkdwn Concat Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Source Detection": {
      "main": [
        [
          {
            "node": "Structure Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rate Limiter": {
      "main": [
        [
          {
            "node": "NIST.gov CVE API",
            "type": "main",
            "index": 0
          },
          {
            "node": "CERT-FR RSS Feed",
            "type": "main",
            "index": 0
          },
          {
            "node": "BleepingComputer RSS",
            "type": "main",
            "index": 0
          },
          {
            "node": "CISA KEV Catalog1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Message Formatter": {
      "main": [
        [
          {
            "node": "Slack Notify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "MAPPING CVE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KEV Enricher": {
      "main": [
        [
          {
            "node": "debug1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare CVE": {
      "main": [
        [
          {
            "node": "debug",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process OTX": {
      "main": [
        [
          {
            "node": "* üåê INTERNET EXPOSURE ESTIMATOR",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AlienVault OTX ENRICHER": {
      "main": [
        [
          {
            "node": "Process OTX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "* üåê INTERNET EXPOSURE ESTIMATOR": {
      "main": [
        [
          {
            "node": "üö® EMERGENCY FIX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize severity": {
      "main": [
        [
          {
            "node": "Normalize Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üö® EMERGENCY FIX": {
      "main": [
        [
          {
            "node": "recalculer severity et score √† partir de CVSS/KEV/OTX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Rate Limiter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NIST.gov CVE API": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "CERT-FR RSS Feed": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "BleepingComputer RSS": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "CISA KEV Catalog1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 6
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CISA KEV catalog": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "recalculer severity et score √† partir de CVSS/KEV/OTX": {
      "main": [
        [
          {
            "node": "Normalize severity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI OUTPUT PARSER1": {
      "main": [
        [
          {
            "node": "Source Detection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "WEBHOOK",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "debug1": {
      "main": [
        [
          {
            "node": "AlienVault OTX ENRICHER",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "debug": {
      "main": [
        [
          {
            "node": "KEV Enricher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CIRCL 3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Extension Check (2min)": {
      "main": [
        [
          {
            "node": "Get Extension Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Extension Queue": {
      "main": [
        [
          {
            "node": "Has Extension Items?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Extension Items?": {
      "main": [
        [
          {
            "node": "Normalize Extension Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Extension Data": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Extension Only2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "MAPPING CVE": {
      "main": [
        [
          {
            "node": "Prepare CVE",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "6bc655a82dd598d9262ebb737245c9e42091e0ec375acdcb4a8362e779910042"
  }
}
